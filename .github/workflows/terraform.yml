name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      tfvars_file:
        description: 'Path to the .tfvars file'
        required: true
        default: 'dev.tfvars'
      action:
        type: choice
        description: 'Apply or Destroy'
        options:
        - plan
        - apply
        - destroy
        required: true
        default: 'apply'

permissions:
  contents: read

jobs:

  Terraform-Setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create S3 Bucket and DynamoDB Table
        run: |
          # Variables
          S3_BUCKET="my-ews-baket1-vladosur"
          DYNAMODB_TABLE="Lock-Files"
          AWS_REGION="us-east-1"

          # Check if S3 bucket exists
          if ! aws s3api head-bucket --bucket "$S3_BUCKET" 2>/dev/null; then
            echo "Creating S3 bucket: $S3_BUCKET"
            aws s3api create-bucket --bucket "$S3_BUCKET" --region "$AWS_REGION" --create-bucket-configuration LocationConstraint="$AWS_REGION"
            aws s3api put-bucket-encryption --bucket "$S3_BUCKET" --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          else
            echo "S3 bucket $S3_BUCKET already exists"
          fi

          # Check if DynamoDB table exists
          if ! aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" 2>/dev/null; then
            echo "Creating DynamoDB table: $DYNAMODB_TABLE"
            aws dynamodb create-table \
              --table-name "$DYNAMODB_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          else
            echo "DynamoDB table $DYNAMODB_TABLE already exists"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.4

      - name: Terraform Init
        working-directory: eks
        run: terraform init

  Terraform-Action:
    runs-on: ubuntu-latest
    needs: Terraform-Setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.4

      - name: Terraform Init
        working-directory: eks
        run: terraform init

      - name: Terraform Plan
        if: ${{ github.event.inputs.action  == 'plan' }}
        working-directory: eks
        run: |
          terraform plan -var-file=${{ github.event.inputs.tfvars_file }} -input=false

      - name: Terraform Apply
        if: ${{ github.event.inputs.action  == 'apply' }}
        working-directory: eks
        run: terraform apply -auto-approve -var-file=${{ github.event.inputs.tfvars_file }} -input=false

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: eks
        run: terraform destroy -auto-approve -var-file=${{ github.event.inputs.tfvars_file }} -input=false