name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      tfvars_file:
        description: 'Path to the .tfvars file'
        required: true
        default: 'dev.tfvars'
      action:
        type: choice
        description: 'Apply or Destroy'
        options:
        - plan
        - apply
        - destroy
        required: true
        default: 'apply'

env:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ vars.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:
  CheckOut-Repo:
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: eks

    steps:
    - name: Checkout
      uses: actions/checkout@v4

  Create-S3-and-DynamoDB:
    runs-on: ubuntu-latest
    needs: CheckOut-Repo

    steps:
    - name: Install AWS CLI
      run: sudo apt-get install -y awscli

    - name: Create S3 Bucket
      run: |
        aws s3api create-bucket --bucket my-ews-baket1-vladosur --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION || echo "Bucket already exists"

    - name: Enable Versioning on S3 Bucket
      run: |
        aws s3api put-bucket-versioning --bucket my-ews-baket1-vladosur --versioning-configuration Status=Enabled || echo "Versioning already enabled"

    - name: Create DynamoDB Table
      run: |
        aws dynamodb create-table \
          --table-name terraform-lock-table \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
          || echo "Table already exists"

  Setting-Up-Terraform:
    runs-on: ubuntu-latest
    needs: Create-S3-and-DynamoDB

    steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.8.4

  Terraform-Initializing:
    runs-on: ubuntu-latest
    needs: Setting-Up-Terraform

    steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.8.4
        
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Terraform Init
      working-directory: eks
      run: terraform init

  Terraform-Formatting-Validating:
    runs-on: ubuntu-latest
    needs: Terraform-Initializing

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.8.4
        
    - name: Terraform Init
      working-directory: eks
      run: terraform init
      
    - name: Terraform Format
      working-directory: eks
      run: terraform fmt

    - name: Terraform Validate
      working-directory: eks
      run: terraform validate

  Terraform-Action:
    runs-on: ubuntu-latest
    needs: Terraform-Formatting-Validating
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.8.4

    - name: Terraform Init
      working-directory: eks
      run: terraform init

    - name: Terraform Plan
      if: ${{ github.event.inputs.action  == 'plan' }}
      working-directory: eks
      run: |
        terraform plan -var-file=${{ github.event.inputs.tfvars_file }} -input=false

    - name: Terraform Action
      if: ${{ github.event.inputs.action  == 'apply' }}
      working-directory: eks
      run: terraform ${{ github.event.inputs.action }} -auto-approve -var-file=${{ github.event.inputs.tfvars_file }} -input=false

    - name: Terraform Destroy
      if: ${{ github.event.inputs.action == 'destroy' }}
      working-directory: eks
      run: terraform ${{ github.event.inputs.action }} -auto-approve -var-file=${{ github.event.inputs.tfvars_file }} -input=false